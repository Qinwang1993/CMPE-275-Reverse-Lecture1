// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace CMPE275 {
class Test1;
class Test1DefaultTypeInternal;
extern Test1DefaultTypeInternal _Test1_default_instance_;
class Test2;
class Test2DefaultTypeInternal;
extern Test2DefaultTypeInternal _Test2_default_instance_;
class Test3;
class Test3DefaultTypeInternal;
extern Test3DefaultTypeInternal _Test3_default_instance_;
class Test3Sub;
class Test3SubDefaultTypeInternal;
extern Test3SubDefaultTypeInternal _Test3Sub_default_instance_;
}  // namespace CMPE275
PROTOBUF_NAMESPACE_OPEN
template<> ::CMPE275::Test1* Arena::CreateMaybeMessage<::CMPE275::Test1>(Arena*);
template<> ::CMPE275::Test2* Arena::CreateMaybeMessage<::CMPE275::Test2>(Arena*);
template<> ::CMPE275::Test3* Arena::CreateMaybeMessage<::CMPE275::Test3>(Arena*);
template<> ::CMPE275::Test3Sub* Arena::CreateMaybeMessage<::CMPE275::Test3Sub>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CMPE275 {

// ===================================================================

class Test1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMPE275.Test1) */ {
 public:
  Test1();
  virtual ~Test1();

  Test1(const Test1& from);
  Test1(Test1&& from) noexcept
    : Test1() {
    *this = ::std::move(from);
  }

  inline Test1& operator=(const Test1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test1& operator=(Test1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test1* internal_default_instance() {
    return reinterpret_cast<const Test1*>(
               &_Test1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Test1& a, Test1& b) {
    a.Swap(&b);
  }
  inline void Swap(Test1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test1* New() const final {
    return CreateMaybeMessage<Test1>(nullptr);
  }

  Test1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test1& from);
  void MergeFrom(const Test1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMPE275.Test1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt1FieldNumber = 1,
    kInt2FieldNumber = 2,
  };
  // repeated int32 int1 = 1;
  int int1_size() const;
  private:
  int _internal_int1_size() const;
  public:
  void clear_int1();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int1() const;
  void _internal_add_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int1();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int1(int index) const;
  void set_int1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int1();

  // repeated int32 int2 = 2 [packed = true];
  int int2_size() const;
  private:
  int _internal_int2_size() const;
  public:
  void clear_int2();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int2() const;
  void _internal_add_int2(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int2();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int2(int index) const;
  void set_int2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int2(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int2();

  // @@protoc_insertion_point(class_scope:CMPE275.Test1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int2_;
  mutable std::atomic<int> _int2_cached_byte_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Test2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMPE275.Test2) */ {
 public:
  Test2();
  virtual ~Test2();

  Test2(const Test2& from);
  Test2(Test2&& from) noexcept
    : Test2() {
    *this = ::std::move(from);
  }

  inline Test2& operator=(const Test2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test2& operator=(Test2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test2* internal_default_instance() {
    return reinterpret_cast<const Test2*>(
               &_Test2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Test2& a, Test2& b) {
    a.Swap(&b);
  }
  inline void Swap(Test2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test2* New() const final {
    return CreateMaybeMessage<Test2>(nullptr);
  }

  Test2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test2& from);
  void MergeFrom(const Test2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMPE275.Test2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDouble1FieldNumber = 1,
    kFloat1FieldNumber = 2,
    kInt1FieldNumber = 3,
    kInt2FieldNumber = 4,
    kInt3FieldNumber = 5,
    kInt4FieldNumber = 6,
  };
  // repeated double double1 = 1 [packed = true];
  int double1_size() const;
  private:
  int _internal_double1_size() const;
  public:
  void clear_double1();
  private:
  double _internal_double1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double1() const;
  void _internal_add_double1(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double1();
  public:
  double double1(int index) const;
  void set_double1(int index, double value);
  void add_double1(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double1();

  // repeated float float1 = 2 [packed = true];
  int float1_size() const;
  private:
  int _internal_float1_size() const;
  public:
  void clear_float1();
  private:
  float _internal_float1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float1() const;
  void _internal_add_float1(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float1();
  public:
  float float1(int index) const;
  void set_float1(int index, float value);
  void add_float1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float1();

  // repeated int32 int1 = 3 [packed = true];
  int int1_size() const;
  private:
  int _internal_int1_size() const;
  public:
  void clear_int1();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int1() const;
  void _internal_add_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int1();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int1(int index) const;
  void set_int1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int1();

  // repeated uint32 int2 = 4 [packed = true];
  int int2_size() const;
  private:
  int _internal_int2_size() const;
  public:
  void clear_int2();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_int2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_int2() const;
  void _internal_add_int2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_int2();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 int2(int index) const;
  void set_int2(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_int2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      int2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_int2();

  // repeated sint32 int3 = 5 [packed = true];
  int int3_size() const;
  private:
  int _internal_int3_size() const;
  public:
  void clear_int3();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int3(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int3() const;
  void _internal_add_int3(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int3();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int3(int index) const;
  void set_int3(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int3(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int3();

  // repeated fixed32 int4 = 6 [packed = true];
  int int4_size() const;
  private:
  int _internal_int4_size() const;
  public:
  void clear_int4();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_int4(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_int4() const;
  void _internal_add_int4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_int4();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 int4(int index) const;
  void set_int4(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_int4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      int4() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_int4();

  // @@protoc_insertion_point(class_scope:CMPE275.Test2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double1_;
  mutable std::atomic<int> _double1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float1_;
  mutable std::atomic<int> _float1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int1_;
  mutable std::atomic<int> _int1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > int2_;
  mutable std::atomic<int> _int2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int3_;
  mutable std::atomic<int> _int3_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > int4_;
  mutable std::atomic<int> _int4_cached_byte_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Test3Sub :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMPE275.Test3Sub) */ {
 public:
  Test3Sub();
  virtual ~Test3Sub();

  Test3Sub(const Test3Sub& from);
  Test3Sub(Test3Sub&& from) noexcept
    : Test3Sub() {
    *this = ::std::move(from);
  }

  inline Test3Sub& operator=(const Test3Sub& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test3Sub& operator=(Test3Sub&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test3Sub& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test3Sub* internal_default_instance() {
    return reinterpret_cast<const Test3Sub*>(
               &_Test3Sub_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Test3Sub& a, Test3Sub& b) {
    a.Swap(&b);
  }
  inline void Swap(Test3Sub* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test3Sub* New() const final {
    return CreateMaybeMessage<Test3Sub>(nullptr);
  }

  Test3Sub* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test3Sub>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test3Sub& from);
  void MergeFrom(const Test3Sub& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test3Sub* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMPE275.Test3Sub";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt1FieldNumber = 1,
    kInt2FieldNumber = 2,
    kInt3FieldNumber = 3,
    kInt4FieldNumber = 4,
  };
  // optional int32 int1 = 1;
  bool has_int1() const;
  private:
  bool _internal_has_int1() const;
  public:
  void clear_int1();
  ::PROTOBUF_NAMESPACE_ID::int32 int1() const;
  void set_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int1() const;
  void _internal_set_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 int2 = 2;
  bool has_int2() const;
  private:
  bool _internal_has_int2() const;
  public:
  void clear_int2();
  ::PROTOBUF_NAMESPACE_ID::int32 int2() const;
  void set_int2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int2() const;
  void _internal_set_int2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 int3 = 3;
  bool has_int3() const;
  private:
  bool _internal_has_int3() const;
  public:
  void clear_int3();
  ::PROTOBUF_NAMESPACE_ID::int32 int3() const;
  void set_int3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int3() const;
  void _internal_set_int3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 int4 = 4;
  bool has_int4() const;
  private:
  bool _internal_has_int4() const;
  public:
  void clear_int4();
  ::PROTOBUF_NAMESPACE_ID::int32 int4() const;
  void set_int4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int4() const;
  void _internal_set_int4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMPE275.Test3Sub)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 int1_;
  ::PROTOBUF_NAMESPACE_ID::int32 int2_;
  ::PROTOBUF_NAMESPACE_ID::int32 int3_;
  ::PROTOBUF_NAMESPACE_ID::int32 int4_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Test3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMPE275.Test3) */ {
 public:
  Test3();
  virtual ~Test3();

  Test3(const Test3& from);
  Test3(Test3&& from) noexcept
    : Test3() {
    *this = ::std::move(from);
  }

  inline Test3& operator=(const Test3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test3& operator=(Test3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test3* internal_default_instance() {
    return reinterpret_cast<const Test3*>(
               &_Test3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Test3& a, Test3& b) {
    a.Swap(&b);
  }
  inline void Swap(Test3* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test3* New() const final {
    return CreateMaybeMessage<Test3>(nullptr);
  }

  Test3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test3& from);
  void MergeFrom(const Test3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMPE275.Test3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubFieldNumber = 1,
    kInt1FieldNumber = 2,
    kInt2FieldNumber = 3,
    kInt3FieldNumber = 4,
    kInt4FieldNumber = 5,
  };
  // repeated .CMPE275.Test3Sub sub = 1;
  int sub_size() const;
  private:
  int _internal_sub_size() const;
  public:
  void clear_sub();
  ::CMPE275::Test3Sub* mutable_sub(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMPE275::Test3Sub >*
      mutable_sub();
  private:
  const ::CMPE275::Test3Sub& _internal_sub(int index) const;
  ::CMPE275::Test3Sub* _internal_add_sub();
  public:
  const ::CMPE275::Test3Sub& sub(int index) const;
  ::CMPE275::Test3Sub* add_sub();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMPE275::Test3Sub >&
      sub() const;

  // repeated int32 int1 = 2 [packed = true];
  int int1_size() const;
  private:
  int _internal_int1_size() const;
  public:
  void clear_int1();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int1() const;
  void _internal_add_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int1();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int1(int index) const;
  void set_int1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int1();

  // repeated int32 int2 = 3 [packed = true];
  int int2_size() const;
  private:
  int _internal_int2_size() const;
  public:
  void clear_int2();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int2() const;
  void _internal_add_int2(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int2();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int2(int index) const;
  void set_int2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int2(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int2();

  // repeated int32 int3 = 4 [packed = true];
  int int3_size() const;
  private:
  int _internal_int3_size() const;
  public:
  void clear_int3();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int3(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int3() const;
  void _internal_add_int3(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int3();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int3(int index) const;
  void set_int3(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int3(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int3();

  // repeated int32 int4 = 5 [packed = true];
  int int4_size() const;
  private:
  int _internal_int4_size() const;
  public:
  void clear_int4();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int4(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int4() const;
  void _internal_add_int4(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int4();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int4(int index) const;
  void set_int4(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int4(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int4() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int4();

  // @@protoc_insertion_point(class_scope:CMPE275.Test3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMPE275::Test3Sub > sub_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int1_;
  mutable std::atomic<int> _int1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int2_;
  mutable std::atomic<int> _int2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int3_;
  mutable std::atomic<int> _int3_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int4_;
  mutable std::atomic<int> _int4_cached_byte_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Test1

// repeated int32 int1 = 1;
inline int Test1::_internal_int1_size() const {
  return int1_.size();
}
inline int Test1::int1_size() const {
  return _internal_int1_size();
}
inline void Test1::clear_int1() {
  int1_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test1::_internal_int1(int index) const {
  return int1_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test1::int1(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test1.int1)
  return _internal_int1(index);
}
inline void Test1::set_int1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int1_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test1.int1)
}
inline void Test1::_internal_add_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int1_.Add(value);
}
inline void Test1::add_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int1(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test1.int1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test1::_internal_int1() const {
  return int1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test1::int1() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test1.int1)
  return _internal_int1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test1::_internal_mutable_int1() {
  return &int1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test1::mutable_int1() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test1.int1)
  return _internal_mutable_int1();
}

// repeated int32 int2 = 2 [packed = true];
inline int Test1::_internal_int2_size() const {
  return int2_.size();
}
inline int Test1::int2_size() const {
  return _internal_int2_size();
}
inline void Test1::clear_int2() {
  int2_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test1::_internal_int2(int index) const {
  return int2_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test1::int2(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test1.int2)
  return _internal_int2(index);
}
inline void Test1::set_int2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int2_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test1.int2)
}
inline void Test1::_internal_add_int2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int2_.Add(value);
}
inline void Test1::add_int2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int2(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test1.int2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test1::_internal_int2() const {
  return int2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test1::int2() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test1.int2)
  return _internal_int2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test1::_internal_mutable_int2() {
  return &int2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test1::mutable_int2() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test1.int2)
  return _internal_mutable_int2();
}

// -------------------------------------------------------------------

// Test2

// repeated double double1 = 1 [packed = true];
inline int Test2::_internal_double1_size() const {
  return double1_.size();
}
inline int Test2::double1_size() const {
  return _internal_double1_size();
}
inline void Test2::clear_double1() {
  double1_.Clear();
}
inline double Test2::_internal_double1(int index) const {
  return double1_.Get(index);
}
inline double Test2::double1(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test2.double1)
  return _internal_double1(index);
}
inline void Test2::set_double1(int index, double value) {
  double1_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test2.double1)
}
inline void Test2::_internal_add_double1(double value) {
  double1_.Add(value);
}
inline void Test2::add_double1(double value) {
  _internal_add_double1(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test2.double1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Test2::_internal_double1() const {
  return double1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Test2::double1() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test2.double1)
  return _internal_double1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Test2::_internal_mutable_double1() {
  return &double1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Test2::mutable_double1() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test2.double1)
  return _internal_mutable_double1();
}

// repeated float float1 = 2 [packed = true];
inline int Test2::_internal_float1_size() const {
  return float1_.size();
}
inline int Test2::float1_size() const {
  return _internal_float1_size();
}
inline void Test2::clear_float1() {
  float1_.Clear();
}
inline float Test2::_internal_float1(int index) const {
  return float1_.Get(index);
}
inline float Test2::float1(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test2.float1)
  return _internal_float1(index);
}
inline void Test2::set_float1(int index, float value) {
  float1_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test2.float1)
}
inline void Test2::_internal_add_float1(float value) {
  float1_.Add(value);
}
inline void Test2::add_float1(float value) {
  _internal_add_float1(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test2.float1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Test2::_internal_float1() const {
  return float1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Test2::float1() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test2.float1)
  return _internal_float1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Test2::_internal_mutable_float1() {
  return &float1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Test2::mutable_float1() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test2.float1)
  return _internal_mutable_float1();
}

// repeated int32 int1 = 3 [packed = true];
inline int Test2::_internal_int1_size() const {
  return int1_.size();
}
inline int Test2::int1_size() const {
  return _internal_int1_size();
}
inline void Test2::clear_int1() {
  int1_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test2::_internal_int1(int index) const {
  return int1_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test2::int1(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test2.int1)
  return _internal_int1(index);
}
inline void Test2::set_int1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int1_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test2.int1)
}
inline void Test2::_internal_add_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int1_.Add(value);
}
inline void Test2::add_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int1(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test2.int1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test2::_internal_int1() const {
  return int1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test2::int1() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test2.int1)
  return _internal_int1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test2::_internal_mutable_int1() {
  return &int1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test2::mutable_int1() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test2.int1)
  return _internal_mutable_int1();
}

// repeated uint32 int2 = 4 [packed = true];
inline int Test2::_internal_int2_size() const {
  return int2_.size();
}
inline int Test2::int2_size() const {
  return _internal_int2_size();
}
inline void Test2::clear_int2() {
  int2_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Test2::_internal_int2(int index) const {
  return int2_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Test2::int2(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test2.int2)
  return _internal_int2(index);
}
inline void Test2::set_int2(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  int2_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test2.int2)
}
inline void Test2::_internal_add_int2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  int2_.Add(value);
}
inline void Test2::add_int2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_int2(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test2.int2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Test2::_internal_int2() const {
  return int2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Test2::int2() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test2.int2)
  return _internal_int2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Test2::_internal_mutable_int2() {
  return &int2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Test2::mutable_int2() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test2.int2)
  return _internal_mutable_int2();
}

// repeated sint32 int3 = 5 [packed = true];
inline int Test2::_internal_int3_size() const {
  return int3_.size();
}
inline int Test2::int3_size() const {
  return _internal_int3_size();
}
inline void Test2::clear_int3() {
  int3_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test2::_internal_int3(int index) const {
  return int3_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test2::int3(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test2.int3)
  return _internal_int3(index);
}
inline void Test2::set_int3(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int3_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test2.int3)
}
inline void Test2::_internal_add_int3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int3_.Add(value);
}
inline void Test2::add_int3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int3(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test2.int3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test2::_internal_int3() const {
  return int3_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test2::int3() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test2.int3)
  return _internal_int3();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test2::_internal_mutable_int3() {
  return &int3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test2::mutable_int3() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test2.int3)
  return _internal_mutable_int3();
}

// repeated fixed32 int4 = 6 [packed = true];
inline int Test2::_internal_int4_size() const {
  return int4_.size();
}
inline int Test2::int4_size() const {
  return _internal_int4_size();
}
inline void Test2::clear_int4() {
  int4_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Test2::_internal_int4(int index) const {
  return int4_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Test2::int4(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test2.int4)
  return _internal_int4(index);
}
inline void Test2::set_int4(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  int4_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test2.int4)
}
inline void Test2::_internal_add_int4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  int4_.Add(value);
}
inline void Test2::add_int4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_int4(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test2.int4)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Test2::_internal_int4() const {
  return int4_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Test2::int4() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test2.int4)
  return _internal_int4();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Test2::_internal_mutable_int4() {
  return &int4_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Test2::mutable_int4() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test2.int4)
  return _internal_mutable_int4();
}

// -------------------------------------------------------------------

// Test3Sub

// optional int32 int1 = 1;
inline bool Test3Sub::_internal_has_int1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Test3Sub::has_int1() const {
  return _internal_has_int1();
}
inline void Test3Sub::clear_int1() {
  int1_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3Sub::_internal_int1() const {
  return int1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3Sub::int1() const {
  // @@protoc_insertion_point(field_get:CMPE275.Test3Sub.int1)
  return _internal_int1();
}
inline void Test3Sub::_internal_set_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  int1_ = value;
}
inline void Test3Sub::set_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int1(value);
  // @@protoc_insertion_point(field_set:CMPE275.Test3Sub.int1)
}

// optional int32 int2 = 2;
inline bool Test3Sub::_internal_has_int2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Test3Sub::has_int2() const {
  return _internal_has_int2();
}
inline void Test3Sub::clear_int2() {
  int2_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3Sub::_internal_int2() const {
  return int2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3Sub::int2() const {
  // @@protoc_insertion_point(field_get:CMPE275.Test3Sub.int2)
  return _internal_int2();
}
inline void Test3Sub::_internal_set_int2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  int2_ = value;
}
inline void Test3Sub::set_int2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int2(value);
  // @@protoc_insertion_point(field_set:CMPE275.Test3Sub.int2)
}

// optional int32 int3 = 3;
inline bool Test3Sub::_internal_has_int3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Test3Sub::has_int3() const {
  return _internal_has_int3();
}
inline void Test3Sub::clear_int3() {
  int3_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3Sub::_internal_int3() const {
  return int3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3Sub::int3() const {
  // @@protoc_insertion_point(field_get:CMPE275.Test3Sub.int3)
  return _internal_int3();
}
inline void Test3Sub::_internal_set_int3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  int3_ = value;
}
inline void Test3Sub::set_int3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int3(value);
  // @@protoc_insertion_point(field_set:CMPE275.Test3Sub.int3)
}

// optional int32 int4 = 4;
inline bool Test3Sub::_internal_has_int4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Test3Sub::has_int4() const {
  return _internal_has_int4();
}
inline void Test3Sub::clear_int4() {
  int4_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3Sub::_internal_int4() const {
  return int4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3Sub::int4() const {
  // @@protoc_insertion_point(field_get:CMPE275.Test3Sub.int4)
  return _internal_int4();
}
inline void Test3Sub::_internal_set_int4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  int4_ = value;
}
inline void Test3Sub::set_int4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int4(value);
  // @@protoc_insertion_point(field_set:CMPE275.Test3Sub.int4)
}

// -------------------------------------------------------------------

// Test3

// repeated .CMPE275.Test3Sub sub = 1;
inline int Test3::_internal_sub_size() const {
  return sub_.size();
}
inline int Test3::sub_size() const {
  return _internal_sub_size();
}
inline void Test3::clear_sub() {
  sub_.Clear();
}
inline ::CMPE275::Test3Sub* Test3::mutable_sub(int index) {
  // @@protoc_insertion_point(field_mutable:CMPE275.Test3.sub)
  return sub_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMPE275::Test3Sub >*
Test3::mutable_sub() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test3.sub)
  return &sub_;
}
inline const ::CMPE275::Test3Sub& Test3::_internal_sub(int index) const {
  return sub_.Get(index);
}
inline const ::CMPE275::Test3Sub& Test3::sub(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test3.sub)
  return _internal_sub(index);
}
inline ::CMPE275::Test3Sub* Test3::_internal_add_sub() {
  return sub_.Add();
}
inline ::CMPE275::Test3Sub* Test3::add_sub() {
  // @@protoc_insertion_point(field_add:CMPE275.Test3.sub)
  return _internal_add_sub();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMPE275::Test3Sub >&
Test3::sub() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test3.sub)
  return sub_;
}

// repeated int32 int1 = 2 [packed = true];
inline int Test3::_internal_int1_size() const {
  return int1_.size();
}
inline int Test3::int1_size() const {
  return _internal_int1_size();
}
inline void Test3::clear_int1() {
  int1_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3::_internal_int1(int index) const {
  return int1_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3::int1(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test3.int1)
  return _internal_int1(index);
}
inline void Test3::set_int1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int1_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test3.int1)
}
inline void Test3::_internal_add_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int1_.Add(value);
}
inline void Test3::add_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int1(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test3.int1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test3::_internal_int1() const {
  return int1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test3::int1() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test3.int1)
  return _internal_int1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test3::_internal_mutable_int1() {
  return &int1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test3::mutable_int1() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test3.int1)
  return _internal_mutable_int1();
}

// repeated int32 int2 = 3 [packed = true];
inline int Test3::_internal_int2_size() const {
  return int2_.size();
}
inline int Test3::int2_size() const {
  return _internal_int2_size();
}
inline void Test3::clear_int2() {
  int2_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3::_internal_int2(int index) const {
  return int2_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3::int2(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test3.int2)
  return _internal_int2(index);
}
inline void Test3::set_int2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int2_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test3.int2)
}
inline void Test3::_internal_add_int2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int2_.Add(value);
}
inline void Test3::add_int2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int2(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test3.int2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test3::_internal_int2() const {
  return int2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test3::int2() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test3.int2)
  return _internal_int2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test3::_internal_mutable_int2() {
  return &int2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test3::mutable_int2() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test3.int2)
  return _internal_mutable_int2();
}

// repeated int32 int3 = 4 [packed = true];
inline int Test3::_internal_int3_size() const {
  return int3_.size();
}
inline int Test3::int3_size() const {
  return _internal_int3_size();
}
inline void Test3::clear_int3() {
  int3_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3::_internal_int3(int index) const {
  return int3_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3::int3(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test3.int3)
  return _internal_int3(index);
}
inline void Test3::set_int3(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int3_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test3.int3)
}
inline void Test3::_internal_add_int3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int3_.Add(value);
}
inline void Test3::add_int3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int3(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test3.int3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test3::_internal_int3() const {
  return int3_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test3::int3() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test3.int3)
  return _internal_int3();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test3::_internal_mutable_int3() {
  return &int3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test3::mutable_int3() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test3.int3)
  return _internal_mutable_int3();
}

// repeated int32 int4 = 5 [packed = true];
inline int Test3::_internal_int4_size() const {
  return int4_.size();
}
inline int Test3::int4_size() const {
  return _internal_int4_size();
}
inline void Test3::clear_int4() {
  int4_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3::_internal_int4(int index) const {
  return int4_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test3::int4(int index) const {
  // @@protoc_insertion_point(field_get:CMPE275.Test3.int4)
  return _internal_int4(index);
}
inline void Test3::set_int4(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int4_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMPE275.Test3.int4)
}
inline void Test3::_internal_add_int4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int4_.Add(value);
}
inline void Test3::add_int4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int4(value);
  // @@protoc_insertion_point(field_add:CMPE275.Test3.int4)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test3::_internal_int4() const {
  return int4_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test3::int4() const {
  // @@protoc_insertion_point(field_list:CMPE275.Test3.int4)
  return _internal_int4();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test3::_internal_mutable_int4() {
  return &int4_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test3::mutable_int4() {
  // @@protoc_insertion_point(field_mutable_list:CMPE275.Test3.int4)
  return _internal_mutable_int4();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CMPE275

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
